using FeedBuffApplicatie.Classes;
using FeedBuffApplicatie.DAL;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace FeedBuffApplicatie.Forms
{
    public partial class FormAssignment : Form
    {
        AssignmentDAL assignmentDal;

        Assignment selectedItem;

        public FormAssignment(DALs dals)
        {
            InitializeComponent();

            // Contains all of the dals inside
            this.assignmentDal = dals.assignmentDAL;

            RefreshAndPopulate();
            SetEditMode(false);
        }

        private void RefreshAndPopulate()
        {
            assignmentDal.GetAll();

            PopulateDataGridView();
        }

        private void PopulateDataGridView()
        {
            // Goes through every element of the Feedback class and makes a new collumn for each
            PropertyDescriptorCollection props = TypeDescriptor.GetProperties(typeof(Assignment));
            DataTable dt = new DataTable();

            foreach (PropertyDescriptor p in props)
                dt.Columns.Add(p.Name, p.PropertyType);

            for (int i = 0; i < assignmentDal.Assignments.Count; i++)
            {
                var item = assignmentDal.Assignments[i];

                dt.Rows.Add(
                    item.Id,
                    item.Description,
                    item.Deadline,
                    item.Completed
                );
            }

            dgvAssignment.DataSource = dt;
        }

        // Toggle between 'editMode' and 'addMode'
        private void SetEditMode(Boolean editModeEnabled)
        {
            // Just to make sure users know that adding won't edit the selected
            buttonCreateAssignement.Text = editModeEnabled ? "Append" : "Create";
            buttonDiscardAssignement.Enabled = editModeEnabled;
            buttonSaveAssignement.Enabled = editModeEnabled;
            buttonDeleteAssignement.Enabled = editModeEnabled;
        }

        // Clear all inputs to an empty default
        private void ClearInputs()
        {
            dateTimePickerDate.Value = DateTime.Now;
            checkBoxCompleted.Checked = false;
            textBoxDescription.Text = "";

            SetEditMode(false);
        }


        // Populate all inputs with a user instance
        private void PopulateInputs(Assignment item)
        {
            dateTimePickerDate.Value = item.Deadline;
            checkBoxCompleted.Checked = item.Completed;
            textBoxDescription.Text = item.Description;

            SetEditMode(true);
        }

        private void buttonCreateFeedback_Click(object sender, EventArgs e)
        {
            // Id set to -1 as a placeholder for the autogenerated SQL id
            assignmentDal.Insert(
                new Assignment(
                    -1,
                    textBoxDescription.Text,
                    dateTimePickerDate.Value,
                    checkBoxCompleted.Checked
                )
            );
            selectedItem = null;
            ClearInputs();
            RefreshAndPopulate();
        }

        private void buttonDiscardFeedback_Click(object sender, EventArgs e)
        {
            if (selectedItem != null)
                PopulateInputs(selectedItem);
        }

        private void buttonDeleteFeedback_Click(object sender, EventArgs e)
        {
            if (selectedItem != null)
                assignmentDal.Delete(selectedItem);
            ClearInputs();
            RefreshAndPopulate();
        }


        private void SelectRowFromDataGridView(int Index)
        {
            // The "header" can be pressed (cauing the below code to break) so make sure that -1 uis not alowed
            if (Index != -1)
            {
                // Data row into a Customer instance with casting (keep it tidy for later)
                selectedItem = new Assignment(
                    (int)dgvAssignment.Rows[Index].Cells[0].Value,
                    (string)dgvAssignment.Rows[Index].Cells[1].Value,
                    (DateTime)dgvAssignment.Rows[Index].Cells[2].Value,
                    (bool)dgvAssignment.Rows[Index].Cells[3].Value
                );

                PopulateInputs(selectedItem);
            }
        }



        private void dgvFeedback_CellClick(object sender, DataGridViewCellEventArgs e)
        {
            if (sender is DataGridView)
            {
                // Make sure sender is a grid view
                DataGridView dgv = (DataGridView)sender;

                // Only if clicking a real row (not the empty bottom one)
                if (e.RowIndex + 1 < dgv.RowCount)
                    SelectRowFromDataGridView(e.RowIndex);
            }
        }

        private void buttonSaveFeedback_Click(object sender, EventArgs e)
        {
            if (selectedItem != null)
            {
                var newItem = new Assignment(
                    selectedItem.Id,
                    textBoxDescription.Text,
                    dateTimePickerDate.Value,
                    checkBoxCompleted.Checked
                );

                assignmentDal.Update(newItem);
                selectedItem = newItem;
                RefreshAndPopulate();
            }
        }
    }
}
